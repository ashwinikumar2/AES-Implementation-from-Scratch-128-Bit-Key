import os
import random
import numpy as np


s_box = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


def derived_ascii(x):			#used to assign number to each of the character used in string
	alphabets=["A","B","C","D","E","F"]
	if(x=='.'):
		return "1A"
	elif(x==' '):
		return "1B"
	elif(x=='?'):
		return "1C"
	elif(65<=ord(x) and ord(x)<=74):
		return str(ord(x)-65)
	elif(75<=ord(x) and ord(x)<=80):
		return str(0)+alphabets[ord(x)-75]
	else:
		return str(ord(x)-65-6)

def get_decimal_from_hex(x):			
	if(ord(str(x))>57 and ord(str(x))<97):
		x1=ord(str(x))-65+10
		return x1
	elif(ord(str(x))>=97):
		x1=ord(str(x))-97+10
		return x1
	else:
		return int(x)

def convert_small_to_big(hex_rep):			#converts small to big alphabet
	if(ord(hex_rep[0])>=97):
		hex_rep=chr(ord(hex_rep[0])-97+65)+hex_rep[1]
	if(ord(hex_rep[1])>=97):
		hex_rep=hex_rep[0]+chr(ord(hex_rep[1])-97+65)
	return hex_rep

def get_char_from_derived_ascii(x):		#used to get character from a number
	if(x<=25):
		return chr(int(x+65))
	elif(x==26):
		return '.'
	elif(x==27):
		return ' '
	elif(x==28):
		return '?'
	return ' '

def matrix_decimal_to_hex(input_matrix):		#convert a decimal format matrix to hexadecimal format			
	input_matrix=np.array(input_matrix)
	input_matrix1=[[0x00 for i in range(input_matrix.shape[0])] for i in range(input_matrix.shape[1])]
	for i in range(input_matrix.shape[0]):
		for j in range(input_matrix.shape[1]):
			input_matrix1[i][j]=hex(input_matrix[i][j])
	return np.array(input_matrix1)

def byte_substitution(input_matrix1):		#Implements the byte substitution scheme in the AES encryption
	input_matrix=matrix_decimal_to_hex(input_matrix1)
	for i in range(4):
		for j in range(4):
			hex_rep=input_matrix[i][j]
			row=''
			coloumn=''
			if(len(hex_rep)==3):
				row=0
				coloumn=hex_rep[2]
			else:
				row=hex_rep[2]
				coloumn=hex_rep[3]
			row_no=get_decimal_from_hex(row)
			col_no=get_decimal_from_hex(coloumn)
			# print("row_no= ",row_no," col_no= ",col_no)
			input_matrix[i][j]=( hex(s_box[row_no][col_no]))
			input_matrix1[i][j]=int( hex(s_box[row_no][col_no]),16)

	return input_matrix1

def round_zero(state_array, key_matrix):				#performs the element wise XOR of the state matrix and key matrix
	state_array=np.bitwise_xor(state_array,key_matrix)
	return state_array

def shift_rows(input_matrix):		#Implements the shift rows operation so as to transform a row in cyclic manner
	for i in range(4):
		x=np.array([0, 0 , 0 , 0])
		for j in range(i,4):
			x[j-i]=input_matrix[i][j]
		for k in range(0,i):
			x[4-i+k]=input_matrix[i][k]
		input_matrix[i]=x

	return input_matrix

def multiply(b,a):			#Multiplication over the GF(2^8)
    if b == 1:
        return a
    tmp = (a<<1) & 0xff
    if b == 2:
        return tmp if a < 127 else tmp^0x1b
    if b == 3:
        return tmp^a if a < 127 else (tmp^0x1b)^a

def mix_coloumns(state_array,fixed_matrix):			#implementing the mix coloumns operation between the fixed matrix and state matrix
	ans=np.zeros([4, 4], dtype = int)
	for i in range(4):			#row of fixed matrix
		for coloumn_in_2 in range(4):		#coloumn in state matrix
			ans[i][coloumn_in_2]=multiply(fixed_matrix[i][0],state_array[0][coloumn_in_2])
			for row_in_2 in range(1,4):
				ans[i][coloumn_in_2]=np.bitwise_xor(ans[i][coloumn_in_2],(multiply(fixed_matrix[i][row_in_2],state_array[row_in_2][coloumn_in_2])))		#FIXME
	
	return ans

def add_round_key(state_array,key_matrix):			#implementing key expansion and then performing add round key
	key_matrix_original=key_matrix
	#performing key expansion
	third_word=[0,0,0,0]
	for i in range(4): third_word[i]=key_matrix[i][3]
	x=np.array([0, 0 , 0 , 0])
	i=1
	for j in range(i,4):
		x[j-i]=key_matrix_original[j][3]
	for k in range(0,i):
		x[4-i+k]=key_matrix_original[k][3]
	key_matrix_original[:,3]=x
	input_matrix=matrix_decimal_to_hex(key_matrix_original)
	i=3
	for j in range(4):
		hex_rep=input_matrix[j][i]
		row=''
		coloumn=''
		if(len(hex_rep)==3):
			row=0
			coloumn=hex_rep[2]
		else:
			row=hex_rep[2]
			coloumn=hex_rep[3]
		row_no=get_decimal_from_hex(row)
		col_no=get_decimal_from_hex(coloumn)
		input_matrix[j][i]=( hex(s_box[row_no][col_no]))
		key_matrix_original[j][i]=int( hex(s_box[row_no][col_no]),16)

	key_matrix_original[:,3]=np.bitwise_xor([1,0,0,0],key_matrix_original[:,3].T).T
	new_key_matrix=key_matrix_original
	new_key_matrix[:,0]=np.bitwise_xor(key_matrix_original[:,0],key_matrix_original[:,3])
	new_key_matrix[:,1]=np.bitwise_xor(new_key_matrix[:,0],key_matrix_original[:,1])
	new_key_matrix[:,1+1]=np.bitwise_xor(new_key_matrix[:,0+1],key_matrix_original[:,1+1])
	new_key_matrix[:,1+2]=np.bitwise_xor(new_key_matrix[:,0+2],third_word)
	#key expansion completed
	#Element wise XOR of the state array and the expanded key matrix
	state_array=np.bitwise_xor(state_array, new_key_matrix)
	return state_array,new_key_matrix

def round_computation(state_array,fixed_matrix,key_matrix):			#A round computation including four steps
	state_array=byte_substitution(state_array)
	state_array=shift_rows(state_array)
	state_array=mix_coloumns(state_array,fixed_matrix)
	state_array,key_matrix=add_round_key(state_array,key_matrix)
	return state_array,key_matrix

if __name__=="__main__":

	# plaintext="Two One Nine Two"
	# key="Thats my Kung Fu"
	plaintext=input("Enter the plaintext(in 16 characters including space): ") 
	key=input("Enter the key(in 16 characters including space): ") 
	#constructing the state matrix and key matrix
	fixed_matrix= np.array([[2, 3,1,1], [1, 2,3,1],[1,1,2,3],[3,1,1,2]])
	state_array = [[0x54 for x in range(4)] for x in range(4)]
	key_matrix = [[0x54 for x in range(4)] for x in range(4)]
	hex_of_plaintext=[0x54 for x in range(16)]
	hex_of_key=[0x54 for x in range(16)]
	for i in range(len(plaintext)):
		hex_of_plaintext[i]=int(hex(ord(plaintext[i])),16)
		hex_of_key[i]=int(hex(ord(key[i])),16)
	index_of_hex=0
	for i in range(4):
		for j in range(4):
			state_array[i][j]=hex_of_plaintext[index_of_hex]
			key_matrix[i][j]=hex_of_key[index_of_hex]
			index_of_hex+=1
	
	state_array=np.array(state_array)
	state_array=state_array.T
	key_matrix=np.array(key_matrix)
	key_matrix=key_matrix.T
	#Round 0
	state_array=round_zero(state_array, key_matrix)
	no_of_rounds=1
	#Round 1
	for i in range(no_of_rounds):
		state_array,key_matrix=round_computation(state_array,fixed_matrix,key_matrix)
	ciphertext=state_array

	print("CIPHER TEXT IN HEXADECIMAL FORMAT= ",matrix_decimal_to_hex( state_array))
	#END OF ENCRYPTION